import config
import telebot
from telebot import types # кнопки
from string import Template
import feedparser


bot = telebot.TeleBot(config.token)




user_dict = {}


class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'dopinfo']

        for key in keys:
            self.key = None

# если /help, /start

#@bot.message_handler(commands=['help', 'start'])
@bot.message_handler(commands=['start'])
def send_welcome(message):
    start_keyboard = types.InlineKeyboardMarkup()
    start_menu = types.InlineKeyboardButton(text='Меню', callback_data='menu')
    start_keyboard.add(start_menu)
    bot.send_message(message.chat.id, "Здравствуйте, " + message.from_user.first_name + ", чтобы продолжить, нажмите на кнопку", reply_markup=start_keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_btn(call):
    if call.data == "menu":
        menu(call.message)
    elif call.data == "skip":
        process_dopinfo_step(call.message)


def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('/Информация')
    itembtn2 = types.KeyboardButton('/Заявка')
    itembtn3 = types.KeyboardButton('/Недвижимости')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id, "Что вы хотели узнать?", reply_markup=markup)
# /about
@bot.message_handler(commands=['Информация'])
def send_about(message):
    bot.send_message(message.chat.id, "Информация о компании")


@bot.message_handler(commands=['Недвижимости'])
def read_rss(message):
    post = feed_parser()
    for key in post.keys():
        bot.send_message(message.chat.id, key + '\n' + post[key])


def feed_parser():
    NewsFeed = {'Недвижимости': 'http://sarvarproject.com/property/feed/'}
    message = dict()

    for key in NewsFeed.keys():
            current_news = feedparser.parse(NewsFeed[key]).entries[0]
            current_news2 = feedparser.parse(NewsFeed[key]).entries[1]
            current_news3 = feedparser.parse(NewsFeed[key]).entries[2]
            current_news4 = feedparser.parse(NewsFeed[key]).entries[3]
            current_news5 = feedparser.parse(NewsFeed[key]).entries[4]
            message[key] = current_news.title + ' | ' + current_news.link + '\n' + current_news2.title + ' | ' + current_news2.link + '\n' + current_news3.title + ' | ' + current_news3.link + '\n' + current_news4.title + ' | ' + current_news4.link + '\n' + current_news5.title + ' | ' + current_news5.link
    return message

# /reg
@bot.message_handler(commands=["Заявка"])
def user_reg(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)

        # удалить старую клавиатуру
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(chat_id, 'Фамилия Имя Отчество', reply_markup=markup)
        bot.register_next_step_handler(msg, process_fullname_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')



def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        button_phone = types.KeyboardButton(text="Отправить номер телефона", request_contact=True)
        markup.add(button_phone)
        bot.send_message(message.chat.id, "Для оставления заявки мне необходим Ваш номер телефона", reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, 'ooops!!')


@bot.message_handler(content_types=['contact'])
def process_phone_step(message):


        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.contact.phone_number

        markup=types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(chat_id, 'Можете оставить дополнительную информацию. \nЕсли не хотите оставить дополнительную информацию, напишите "пусто" или любое слово/символ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_dopinfo_step)


def process_dopinfo_step(message):
    try:

        start_keyboard = types.InlineKeyboardMarkup()
        start_menu = types.InlineKeyboardButton(text='Меню', callback_data='menu')
        start_keyboard.add(start_menu)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.dopinfo = message.text

        # ваша заявка "Имя пользователя"
        bot.send_message(chat_id, getRegData(user, 'Ваша заявка', message.from_user.first_name, message.from_user.username), parse_mode="Markdown", reply_markup=start_keyboard)
        # отправить в группу
        bot.send_message(config.chat_id, getRegData(user, 'Заявка от бота', bot.get_me().username, message.from_user.username),
                         parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, 'ooops!!')




# формирует вид заявки регистрации
# нельзя делать перенос строки Template
# в send_message должно стоять parse_mode="Markdown"

def getRegData(user, title, name, username):

    t = Template(
        '$title *$name* \nИмя пользователя: *$username* \nФИО: *$fullname* \nТелефон: *$phone* \nДополнительная информация: *$dopinfo* \n#заявки')

    return t.substitute({
        'title': title,
        'name': name,
        'username': username,
        'fullname': user.fullname,
        'phone': user.phone,
        'dopinfo': user.dopinfo
    })


# произвольный текст
@bot.message_handler(content_types=["text"])
def send_help(message):
    bot.send_message(message.chat.id, 'О нас - /info\nРегистрация - /zayavka\nПомощь - /help')


# произвольное фото
@bot.message_handler(content_types=["photo"])
def send_help_text(message):
    bot.send_message(message.chat.id, 'Напишите текст')





# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

if __name__ == '__main__':
    bot.polling(none_stop=True)
